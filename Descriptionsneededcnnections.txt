org.apache.commons.configuration.PropertiesConfiguration

enables a java application to read configuration data from a variety of sources


org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean

FactoryBean that creates a JPA EntityManagerFactory according to JPAâ€™s standard bootstrap contract, it can be shared in a Spring application context.
Settings are usually read from a .xml file in a default location, but it can be overridden. 
This EntityManagerFactory will implement all of the native underlying interfaces returned from the PersistenceProvider


org.springframework.orm.jpa.JpaTransactionManager

Binds a JPA EntityManager from the specified factory to the thread.
This is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access.
This transaction mangare supports direct DataSource access within a transaction allowing for mixing services which access JPA and services which use plain JDBC


com.googlecode.simpleobjectassembler.SimpleObjectAssembler

A simple object assembler with the ability to register converters for mapping objects of different types.
Basica configuration for simple cases with the option to override and extend behaviour in different ways for more complex scenarios.
It is free of xml configuration opting for a runtime specification of property paths to ignore for a specific invocation and conversion logic written in Java.


org.springframework.cache.ehcache.EhCacheManagerFactoryBean

FactoryBean that exposes a EHCache CacheManager singleton, configured from a specified config location.
If no config location is specified, a CacheManager will be configured from "ehcache.xml" in the root of the class path.
EhCacheManagerFactoryBean is also necessary for loading EHCache configuration from a non-default config location.



org.springframework.cache.ehcache.EhCacheFactoryBean

FactoryBean that creates a named EHCache Cache object, representing a cache region.
If the specified named cache is not configured, this FactoryBean will construct an instance of a Cache and the specified cache properties and add it to the CacheManager for later retrieval.
If some or all properties are not set, this FactoryBean will use defaults.
If the named Cache instance is found, the properties will be ignored and the Cache instance will be retrieved from CacheManager.


org.springframework.security.providers.encoding.ShaPasswordEncoder

SHA implementation of PasswordEncoder.
If a null password is presented, it will be treated as an empty String ("") password.
As SHA is a one-way hash, the salt can contain any characters.


com.mchange.v2.c3p0.ComboPooledDataSource

c3p0 is an easy-to-use library for making traditional JDBC drivers "enterprise-ready".
By augmenting them with functionality defined by the jdbc3 spec and the optional extensions to jdbc2.
Classes which adapt traditional DriverManager-based JDBC drivers to the newer javax.sql.DataSource scheme for acquiring database Connections.
3p0 DataSources are both Referenceable and Serializable, and are thus suitable for binding to a wide-variety of JNDI-based naming services.


org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter

Exposes Hibernate's persistence provider and EntityManager extension interface, and supports AbstractJpaVendorAdapter's common configuration settings.


liquibase.spring.SpringMigrator	LIB	UNSOURCABLE




org.springframework.ui.velocity.VelocityEngineFactoryBean

Factory bean that configures a VelocityEngine and provides it as bean reference. 
This bean is intended for any kind of usage of Velocity in application code.


org.springframework.mail.javamail.JavaMailSenderImpl

Production implementation of the JavaMailSender interface, supporting both JavaMail MimeMessages and Spring SimpleMailMessages. Can also be used as a plain MailSender implementation.
Allows for defining all settings locally as bean properties.
Alternatively, a pre-configured JavaMail Session can be specified, possibly pulled from an application server's JNDI environment.


code\express-server\src\main\java\com\express\service\notification\NotificationFactoryImpl




org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean

FactoryBean that exposes a JobDetail object that delegates job execution to a specified (static or non-static) method.
Avoids the need to implement a one-line Quartz Job that just invokes an existing service method.


org.springframework.scheduling.quartz.CronTriggerBean

Convenience subclass of Quartz's CronTrigger class, making bean-style usage easier.
CronTrigger itself is already a JavaBean but lacks sensible defaults.
 This class uses the Spring bean name as job name, the Quartz default group ("DEFAULT") as job group, the current time as start time, and indefinite repetition, if not specified.
This class will also register the trigger with the job name and group of a given JobDetail.
This allows SchedulerFactoryBean to automatically register a trigger for the corresponding JobDetail, instead of registering the JobDetail separately.
 


org.springframework.scheduling.quartz.SchedulerFactoryBean

FactoryBean that creates and configures a Quartz Scheduler, manages its lifecycle as part of the Spring application context, and exposes the Scheduler as bean reference for dependency injection.
Allows registration of JobDetails, Calendars and Triggers, automatically starting the scheduler on initialization and shutting it down on destruction.
In scenarios that just require static registration of jobs at startup, there is no need to access the Scheduler instance itself in application code.
Note that Quartz instantiates a new Job for each execution, in contrast to Timer.
Just JobDetail descriptors are shared.
When using persistent jobs, it is strongly recommended to perform all operations on the Scheduler within Spring-managed (or plain JTA) transactions.
Otherwise, database locking will not properly work and might even break.


org.springframework.security.ui.preauth.PreAuthenticatedProcessingFilterEntryPoint

It will be called if the user is rejected by the AbstractPreAuthenticatedProcessingFilter, resulting in a null authentication.
In the pre-authenticated authentication case (unlike CAS, for example) the user will already have been identified through some external mechanism and a secure context established by the time the security-enforcement filter is invoked.


org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping

Implementation of the HandlerMapping interface that maps handlers based on HTTP paths expressed through the RequestMapping annotation at the type or method level.
 If you define custom HandlerMapping beans in your DispatcherServlet context, you need to add a DefaultAnnotationHandlerMapping bean explicitly, since custom HandlerMapping beans replace the default mapping strategies.
Defining a DefaultAnnotationHandlerMapping also allows for registering custom interceptors.
 


org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter

Implementation of the HandlerAdapter interface that maps handler methods based on HTTP paths, HTTP methods and request parameters expressed through the RequestMapping annotation.
This adapter can be customized through various bean properties. A common use case is to apply shared binder initialization logic through a custom WebBindingInitializer.


org.springframework.web.servlet.handler.SimpleUrlHandlerMapping

This mapping is configurable in the application context and has Ant-style path matching capabilities.


org.springframework.web.servlet.view.ContentNegotiatingViewResolver

Implementation of ViewResolver that resolves a view based on the request file name or Accept header.
The ContentNegotiatingViewResolver does not resolve views itself, but delegates to other ViewResolvers.
Additionally, this view resolver exposes the defaultViews property, allowing you to override the views provided by the view resolvers.


org.springframework.web.servlet.view.XmlViewResolver

Implementation of ViewResolver that uses bean definitions in an XML file, specified by resource location.


org.springframework.web.servlet.view.InternalResourceViewResolver

Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (i.e. Servlets and JSPs) and subclasses.
The view class for all views generated by this resolver can be specified via UrlBasedViewResolver.setViewClass(java.lang.Class).


org.unitils.database.UnitilsDataSourceFactoryBean

missing 


org.unitils.orm.jpa.util.provider.hibernate.UnitilsHibernateJpaVendorAdapter




org.springframework.orm.jpa.JpaTransactionManager




code\express-server\src\test\java\com\express\testutils\UnitilsDatabaseConstraintsDisabler




